= AASM - Ruby state machines

This package contains AASM, a library for adding finite state machines to Ruby classes.

AASM started as the acts_as_state_machine plugin but has evolved into a more generic library that no longer targets only ActiveRecord models.

AASM has the following features:

* States
* Machines
* Events
* Transitions

== Download

The latest AASM can currently be pulled from the git repository on github.

* http://github.com/rubyist/aasm/tree/master

A release and a gem are forthcoming.



== Installation

=== From GitHub hosted gems

  % sudo gem sources -a http://gems.github.com # (you only need to do this once)
  % sudo gem install rubyist-aasm

=== Building your own gems

  % rake gem
  % sudo gem install pkg/aasm-2.0.1.gem


== Simple Example

Here's a quick example highlighting some of the features.

  class Conversation
    include AASM

    aasm_initial_state :initial

    aasm_state :initial
    aasm_state :read
    aasm_state :closed


    aasm_event :view do
      transitions :to => :read, :from => [:initial]
    end

    aasm_event :close do
      transitions :to => :closed, :from => [:read, :initial]
    end
  end

Multiple transitions for an event are supported, in which case you want to specify
a :guard option which is a symbol to a method or a proc that returns a boolean
to decide whether that transition is allowed. aasm will process transitions in order
and the first passing guard clause is the one in effect.

States also support :enter and :exit options allowing you further hooks into
the lifecycle.

== Advanced Features

Arguments to an event call will be passed to on_transition method.

aasm_event :view do
  transitions :to => :read, :from => [:initial], :on_transition => :view_happening
end

def view_happening(a=nil, b=nil)
end

Calling conversation.view(1, 2) will result in view_happening receiving a=1, b=2

UNLESS...
You are using the advanced feature of multiple :to states in which case you can
pass the state name symbol as the first argument to the event call to control your 
destination state.

aasm_event :view do
  transitions :to => [:read, :closed], :from => [:initial], :on_transition => :view_happening
end

Now, you can call:
conversation.view
=> to transition to the first :to state (:read)
or
conversation.view :closed
=> to force a transition to the :closed state
or
conversation.view(1, 2)
=> to transition to :read and receive a=1, b=2 in view_happening
or
conversation.view(:closed, 1, 2)
=> to transition to :closed and receive a=1, b=2 in view_happening


= Other Stuff

Author::  Scott Barron <scott at elitists dot net>
License:: Copyright 2006, 2007, 2008 by Scott Barron.
          Released under an MIT-style license.  See the LICENSE  file
          included in the distribution.
Bugs::    http://rubyist.lighthouseapp.com/projects/13207-aasm/
GitHub::  http://github.com/rubyist/aasm/tree/master

== Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
